if(1==1)  // define the parameters and display titles 
{
_SECTION_BEGIN("Formula 1");
_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{VALUES}}"));

x=Param("xposn",1,0,1000,1);
y=Param("yposn",1,0,1000,1);
//sktitle = ParamStr("Title","skself1");
sktitle = ParamStr("Title","sk3");
skaction="Action";
skstepsize=Param( "StepSL", 10, 0, 200 );
skstepsizeP=Param( "StepProfit", 20, 0, 200 );
BrickSize = Param( "BrickSize ",5, 0, 200,1 );
TimeFrameRestore();
TimeFrameSet(1);
}

function changeinmins(skminutes) // tells the diffirence since last candles 
{
//skchange=Ref(C,-1)-Ref(C,-1*(skminutes-1));
skchange=O-Ref(o,-1*skminutes);
return skchange;
}

function next_value(sklastval,skcheckval,BrickSize)
{
valchange=sqrt((skcheckval-sklastval)*(skcheckval-sklastval));
roundedbrick=int(valchange/BrickSize);
bricktoadd=IIf(roundedbrick<=0,BrickSize,roundedbrick*BrickSize);
skupval=sklastval+bricktoadd;
skdownval=sklastval-bricktoadd;
//skupval=sklastval+BrickSize;
//skdownval=sklastval-BrickSize;
//printf("\nvc:"+valchange+"bka:"+bricktoadd+"rb:"+roundedbrick);
sknewval=IIf(skcheckval>=skupval,skupval,IIf(skcheckval<=skdownval,skdownval,sklastval));
//sknewval=IIf(skcheckval>=skupval,skcheckval,IIf(skcheckval<=skdownval,skcheckval,sklastval));

return sknewval;

}

if(1==1) // display the variables 
{
//GfxGradientRect( 1, 1, 1400, 40, colorBlack, colorBlack);
GfxSetBkMode(0);
GfxSelectFont( "tahmona", 8, 700, False );
GfxSetTextColor( colorGold );
//GfxTextOut( "buy:"+skbuypattern+"  b2:"+skbuypattern2+"   sqf:"+sksellpattern+"  s2:"+sksellpattern2, x+700, y+5 );
//GfxTextOut( "sel:"+skshortpattern+"  sh2:"+skshortpattern2+"   sqf:"+skcoverpattern+"  c2:"+skcoverpattern2, x+700, y+20 );
GfxTextOut( sktitle +"|"+ Date(), x+700, y+5 );
}

if(1==1) // self renko variables and calculations ======================================== 
{
periods = Param( "atrPeriods", 15, 1, 200, 1 );
skatr= ATR(periods);
maatr=MA(skatr,50);
avgatrperiods=IIf(skatr<2,2,round((skatr+5)/10)*10) ;
skts=Interval();
suggestedbrick_bn=IIf(skts<60,10,IIf(skts<300,20,IIf(skts<900,30,IIf(skts<1800,50,IIf(skts<3601,100,100)))));
//BrickSize=BrickSize1 = LastValue(avgatrperiods);
printf("bricks:"+BrickSize);
//BrickSize=suggestedbrick_bn;
//BrickSize=10;suggestedbrick_bn
Plot(BrickSize, " | BrickSize", colorRed, styleNoLine | styleOwnScale | styleNoLabel);
Plot(skatr, " | atr", colorRed, styleNoLine | styleOwnScale | styleNoLabel);
Plot(suggestedbrick_bn, " | try", colorRed, styleNoLine | styleOwnScale | styleNoLabel);
Plot(avgatrperiods, "| avgatr", colorRed, styleNoLine | styleOwnScale | styleNoLabel);
i=0;k=0;
//SKPChanged=SKP=SKPC=SKB=SKS=SKPD;

dd = DateNum();
tt = TimeNum();

nClose[i] = rClose[i] = Close[i];
nHigh[i] = rHigh[i] = Close[i];
nOpen[i] = rOpen[i] = Close[i];
nLow[i] = rLow[i] = Close[i];
nDD[i] = dd[i];
nTT[i] = tt[i];

SKRP[0] = SKP[0]=Close[0];
SKPChanged[0]=0;
//currentstate[0]=0;
//skgotprice[0]=0;
for(i=1; i < BarCount ; i++)
{
rClose[i]=next_value(rClose[i-1],Close[i],BrickSize);
rOpen[i]=next_value(rOpen[i-1],Open[i],BrickSize);
rHigh[i]=next_value(rHigh[i-1],High[i],BrickSize);
rLow[i]=next_value(rLow[i-1],Low[i],BrickSize);
SKP[i]=rClose[i];
SKPChanged[i]=IIf(rClose[i]==rClose[i-1],0,IIf(rClose[i]<rClose[i-1],-1,1));

//currentstat[i]=IIf(Buy[i],1,IIf(Short[i],2,currentstat[i-1]));
//skgotprice[i]=IIf(Buy[i],O[i],IIf(Short[i],O[i],skgotprice[i-1]));

if(SKPChanged[i]==1  OR SKPChanged[i]==-1)
{
k++;
//SKRP[k]=SKP[i];
nClose[k] = rClose[i] ;
nHigh[k] = rHigh[i] ;
nOpen[k] = rOpen[i] ;
nLow[k] = rLow[i];
nDD[k] = dd[i];
nTT[k] = tt[i];
//printf("\nBar:"+i+",SKP:"+SKP[i]+",chg:"+SKPChanged[i]+",rk:"+k);
//printf("\nSKRP:"+NumToStr(nClose[k]));
}
}

shift = i-k -10;
nDD = Ref(nDD, -shift);
nTT = Ref(nTT, -shift);
nOpen = Ref(nOpen, -shift);
nHigh = Ref(nHigh, -shift);
nLow = Ref(nLow, -shift);
nClose = Ref(nClose, -shift);
//SKRP = Ref(SKRP, -shift);

}

if(1==1) // plot the chart based on bricksize
{
Plot(Ref(Close,-1),"\nPClose",IIf(Close>Open,colorGreen,colorRed ),styleNoDraw);
//Plot(Close,"\nClose",IIf(Close>Open,colorGreen,colorRed ),styleBar);
Plot(Open,"OPen",colorBlue,styleNoDraw);
//Plot(nClose,"nClose",colorBlue,styleLine);
//PlotOHLC(nOpen, nHigh, nLow, nClose, "", colorAqua, styleCandle);
//PlotOHLC(mOpen, mHigh, mLow, mClose, "", colorDefault, styleCandle);
//PlotOHLC(rOpen, rHigh, rLow, rClose, "", colorDefault, styleCandle);
//PlotOHLC(rOpen, rHigh, rLow, rClose, "", colorDefault, styleCandle);
}

if(1==1) // print some information about close and OPen candles 
{
printf("\nPO:"+Ref(o,-1)+",PC:"+ref(c,-1)+",O:"+O+",C:"+Close);
printf("\nrPO:"+Ref(rOpen,-1)+",rPC:"+Ref(rClose,-1));
printf(",rO:"+rOpen+",rC:"+rClose);
//printf("\nnO:"+nOpen+",nC:"+nClose);
}

function lastpattern_rclose(count)
{
str1="";
for (i=0;i<count;i++)
{
k=-1*i;
skcp=Ref(rClose,k);
skop=Ref(rOpen,k);
result1=IIf(skcp>skop,1,0);
str1+=result1;
}
return str1;
}

function lastpattern_close(count)
{
str1="";
for (i=0;i<count;i++)
{
k=-1*i;
skcp=Ref(Close,k);
skop=Ref(Open,k);
result1=IIf(skcp>skop,1,0);
str1+=result1;
}
return str1;
}

function lastpattern_nclose(count)
{
str1="";
for (i=0;i<count;i++)
{
k=-1*i;
skcp=Ref(nClose,k);
skop=Ref(nOpen,k);
result1=IIf(skcp>skop,1,0);
str1+=result1;
}
return str1;
}

function skpatterncheck_nclose(name1,pattern)
{
count=StrLen(pattern);
SKGOTP=lastpattern_rclose(count);
//SKGOTP=pattern;
skresult=True;
str2="";
for(i=0;i<count;i++)
{
k=-1*i;
skcp=Ref(nClose,k);
skop=Ref(nOpen,k);
cgr=StrToNum(StrMid(pattern,i,1));
skresult1=IIf(skcp>skop,0,1);
skresult2=IIf(skresult1!=cgr,True,False);
str2+=skresult2;
skresult=skresult AND skresult2;
}
printf("\n["+skresult+"]:"+name1+"("+str2+") #P:"+pattern+",GN:"+SKGOTP);
skifc=StrToNum(NumToStr(IIf(skresult==1,1,0)));
//printf("\n"+typeof(skifc)+"skifc:"+skifc);
If(skifc==1) { skaction=skaction +","+ name1 +"-"+ pattern; }
return skresult;
}

function skpatterncheck_close(name1,pattern)
{
count=StrLen(pattern);
SKGOTP=lastpattern_close(count);
//SKGOTP=pattern;
skresult=True;
str2="";
for(i=0;i<count;i++)
{
k=-1*i;
skcp=Ref(Close,k);
skop=Ref(Open,k);
cgr=StrToNum(StrMid(pattern,i,1));
skresult1=IIf(skcp>skop,0,1);
skresult2=IIf(skresult1!=cgr,True,False);
str2+=skresult2;
skresult=skresult AND skresult2;
}
printf("\n["+skresult+"]:"+name1+"("+str2+") #P:"+pattern+",GC:"+SKGOTP);
skifc=StrToNum(NumToStr(IIf(skresult==1,1,0)));
//printf("\n"+typeof(skifc)+"skifc:"+skifc);
If(skifc==1) { skaction=skaction +","+ name1 +"-"+pattern; }
return skresult;
}

function skpatterncheck_rclose(name1,pattern)
{
count=StrLen(pattern);
SKGOTP=lastpattern_rclose(count);
//SKGOTP=pattern;
skresult=True;
str2="";
for(i=0;i<count;i++)
{
k=-1*i;
skcp=Ref(rClose,k);
skop=Ref(rOpen,k);
cgr=StrToNum(StrMid(pattern,i,1));
skresult1=IIf(skcp>skop,0,1);
skresult2=IIf(skresult1!=cgr,True,False);
str2+=skresult2;
skresult=skresult AND skresult2;
}
printf("\n["+skresult+"]:"+name1+"("+str2+") #P:"+pattern+",GR:"+SKGOTP);
skifc=StrToNum(NumToStr(IIf(skresult==1,1,0)));
//printf("\n"+typeof(skifc)+"skifc:"+skifc);
If(skifc==1) { skaction=skaction +","+ name1+"-"+pattern; }
return skresult;
}

if(1==1) // print the last pattern seen 
{
printf("\nLast,C="+lastpattern_close(10)+"R="+lastpattern_rclose(10)+",N="+lastpattern_nclose(10));
}

if(1==1) // set6 for buy sell signals 
{
//Buy=Sell=Short=Cover=0;
/*
Buy=skpatterncheck_rclose("RB1","21")  //OR skpatterncheck_rclose("RB1","211")
OR skpatterncheck_rclose("RB1","2100000")  
OR  skpatterncheck_close("CB1","2100000")
OR  skpatterncheck_close("CB1","2100")   ;

Short=skpatterncheck_rclose("RW1","200001111111")  
OR skpatterncheck_rclose("RW1","2001111")  
OR skpatterncheck_close("CW1","2011111")
OR skpatterncheck_close("CW1","200")   ;
*/
//printf("\nchange:10min:"+changeinmins(10));
//Short = 0 ;
//Buy=skpatterncheck_close("CB1","201001")   ;
Buy=IIf(changeinmins(30)<0,1,0) AND IIf(changeinmins(10)>10,1,0);
//sellsignal=Sell=False OR skpatterncheck_close("CS1","200111") OR Short;
sellsignal=Sell=IIf(changeinmins(10)<0,1,0);

Short=IIf(changeinmins(30)>0,1,0) AND IIf(changeinmins(10)<-10,1,0);
//coversignal=Cover=False OR skpatterncheck_rclose("CC1","2110000") OR Buy;
coversignal=Cover=IIf(changeinmins(10)>0,1,0);
}

if(1==1) // set sell and cover dynamically based on LSL and SSL 
{
Buy=ExRem(Buy,Sell) AND NOT SHORT;
sklong=Flip(Buy,Sell) OR Sell;
//BuyPrice=IIf(sklong,ValueWhen(Buy,(O+C+H+L)/4),Null);
BuyPrice=IIf(sklong,ValueWhen(Buy,O),Null);
SKSLbuy=IIf(sklong,IIf(BarsSince(Buy)==0 OR (C-BuyPrice)<skstepsize/2 ,-1*skstepsize,int((C-BuyPrice)/skstepsize)*skstepsize),Null);
LSL2=IIf(sklong,IIf(BarsSince(Buy)==0,BuyPrice+SKSLbuy,BuyPrice+HighestSince(Buy,SKSLbuy,1)),null);//  (SKSLbuy,1,1)),null);
SKLT1=BuyPrice+skstepsizeP;//  (SKSLbuy,1,1)),null);
Sell_LSL=IIF(Ref(LSL2,-1) >Ref(C,-1),True,false);
Sell_LT1=IIf(C>SKLT1 AND O>C AND Ref(O,-1)>Ref(C,-1),True,false);
printf("\nSKLT1:"+SKLT1+"Prof:"+skstepsizeP+"bp:"+BuyPrice+"sellt1:"+Sell_LT1);
Sell=Sell OR Sell_LSL OR Sell_LT1; // Ref(Sell_LSL,-1); 
//Sell=Sell_LSL OR Sell_LT1; // Ref(Sell_LSL,-1); 
Sell = ExRem(Sell, Buy);
SellPrice=ValueWhen(Sell,O);

Short=ExRem(Short,Cover) AND NOT BUY;
skshrt=Flip(Short,Cover) OR Cover;
//Shortprice=IIf(skshrt,ValueWhen(Short,(O+C+H+L)/4),Null);
Shortprice=IIf(skshrt,ValueWhen(Short,O),Null);
SKSLshort=IIf(skshrt,IIf(BarsSince(Short)==0 OR (ShortPrice-C)<skstepsize/2,-1*skstepsize,int((ShortPrice-C)/skstepsize)*skstepsize),Null);
SSL2=IIf(skshrt,IIf(BarsSince(Short)==0,ShortPrice-SKSLshort,ShortPrice-HighestSince(Short,SKSLshort,1)),null);
SKST1=ShortPrice-skstepsizeP;
Cover_SSL=IIf(Ref(C,-1)>Ref(SSL2,-1),True,false);
Cover_ST1=IIf(C<SKST1 AND O<C AND Ref(O,-1)<Ref(C,-1),True,false);
printf("\nSKST1:"+SKST1+"SP:"+ShortPrice+"CT1:"+COVER_ST1);

//Cover= Cover OR Cover_SSL OR Cover_ST1 ;// Ref(Cover_SSL,-1);
Cover= Cover_SSL OR Cover_ST1 ;// Ref(Cover_SSL,-1);
printf("\nskcheck1,SSL2:"+SSL2+"LSSL2:"+Ref(SSL2,-1)+"CSSL:"+Cover_SSL+"LCSSL:"+Ref(Cover_SSL,-1)+"Cover:"+Cover);
Cover=ExRem(Cover,Short);
CoverPrice=ValueWhen(Cover,O);

sklong=Flip(Buy,Sell) OR Sell ; 
skshrt=Flip(Short,Cover) OR Cover ;


printf("\n--------StepSL:"+skstepsize+
"\nFinal2-B:"+Buy+",S:"+Sell+",Sh:"+Short+",C:"+Cover+",lng:"+sklong+",shrt:"+skshrt);
//sklong=Flip(Buy,Sell) OR Sell; 
//skshrt=Flip(Short,Cover) OR Cover;

//BuyPrice=IIf(sklong,ValueWhen(Buy,(O+C+H+L)/4),Null);
//Shortprice=IIf(skshrt,ValueWhen(Short,(O+C+H+L)/4),Null);
//SKSLbuy=IIf(sklong,IIf(BarsSince(Buy)==0 OR (C-BuyPrice)<skstepsize ,-1*skstepsize,int((C-BuyPrice)/skstepsize)*skstepsize),Null);
//LSL2=IIf(sklong,IIf(BarsSince(Buy)==0,BuyPrice+SKSLbuy,BuyPrice+HighestSince(Buy,SKSLbuy,1)),null);//  (SKSLbuy,1,1)),null);
//SKSLshort=IIf(skshrt,IIf(BarsSince(Short)==0 OR (ShortPrice-C)<skstepsize ,-1*skstepsize,int((ShortPrice-C)/skstepsize)*skstepsize),Null);
//SSL2=IIf(skshrt,IIf(BarsSince(Short)==0,ShortPrice-SKSLshort,ShortPrice-HighestSince(Short,SKSLshort,1)),null);

if(1==1) // print and draw the information of stop loss 
{
skdf=IIf(sklong,C-BuyPrice,IIf(skshrt,ShortPrice-c,Null));
skexprice=IIf(sklong,BuyPrice,IIf(skshrt,ShortPrice,Null));
barsgone=IIf(sklong,BarsSince(Buy),IIf(skshrt,BarsSince(Short),Null));
SKSL=IIf(sklong,LSL2,IIf(skshrt,SSL2,Null));
SKSLDF=IIf(sklong,BuyPrice-LSL2,IIf(skshrt,SSL2-ShortPrice,Null));
SKACTION=IIf(sklong,1,IIf(skshrt,-1,0));
SKSLACTION=IIf(Cover,IIf(Cover_SSL,-1,null),IIf(Sell,IIF(Sell_LSL,1,0),Null));

if(1==1) // draw the area of the profit or loss as bars 
{
skprofit=IIf(Sell,O-BuyPrice,IIf(Cover,O-CoverPrice,Null));
skprofitcolor=IIf(skprofit>=0,IIf(Sell,colorGreen,colorBlue),IIf(Sell,colorRed,colorBrown));
Plot(skprofit, "Profit", skprofitcolor, styleArea|styleOwnScale, -50, 50, 0, 1,1);

SLtriggershape=(Cover_SSL OR Sell_LSL ) * shapeHollowCircle * ( Sell OR Cover ) ;
TGtriggershape=(Cover_ST1 OR Sell_LT1 ) * shapeStar * ( Sell OR Cover );
sellcovertriggershape=(coversignal OR sellsignal ) * shapeHollowSquare * ( Sell OR Cover ) ;

PlotShapes( SLtriggershape, IIf(skprofit>0,colorGreen,colorRed), 0, skexprice, -1,0);
PlotShapes( TGtriggershape, IIf(skprofit>0,colorGreen,colorRed), 0, skexprice, -1,1);
PlotShapes( sellcovertriggershape, IIf(skprofit>0,colorGreen,colorRed), 0, skexprice, -1,2);
printf("\nProfit="+skprofit);
//plottext("P="+skprofit,0,LastValue(skexprice),colorGreen);
}

printf("\n--------StepSL:"+skstepsize+
"\nFinal-B:"+Buy+",S:"+Sell+",Sh:"+Short+",C:"+Cover+",lng:"+sklong+",shrt:"+skshrt+",SLA:"+SKSLACTION+"CA:"+Cover_SSL+"SA:"+Sell_LSL+
"\nAction:"+SKACTION+",bars:"+barsgone+",df:"+skdf+",ldf:"+Ref(skdf,-1)+
"\nCRP:"+C+",XP:"+skexprice+",SL:"+SKSL+",SLL:"+Ref(SKSL,-1)+
"\nSLDF:"+SKSLDF+",LSLDF:"+Ref(SKSLDF,-1));
Plot(IIf(sklong , LSL2,Null), "BuySL",colorAqua , styleDots, Null, Null, 0, 1, 1);
Plot(IIf(sklong , BuyPrice,Null), "XP", colorGreen, styleThick, Null, Null, 0, 1, 1);
Plot(IIf(skshrt , SSL2,Null), "ShortSL", colorAqua, styleDots, Null, Null, 0, 1, 1);
Plot(IIf(skshrt , ShortPrice,Null), "XP", colorRed, styleThick	, Null, Null, 0, 1, 1);
}


//SSL=IIf(skshrt,IIf(BarsSince(Short)==0,ShortPrice-SKSLshort,ShortPrice-HighestSince(Short,SKSLshort,1)),Null); // ),null);
//printf("\nlastskcheck"+"BP"+BuyPrice+"preLSL"+Ref(LSL,-1)+"LSL"+LSL);

}


if(1==1) // buy sell arrow draw based on rLow
{
skrvars_print=",o:"+O+"c:"+C;

//LongTrue = Flip(Buy, Sell) || Sell;
//ShortTrue = Flip(Short, Cover) || Cover;

Buyshape = Buy * shapeSmallUpTriangle;
SellShape = Sell * shapeStar;
PlotShapes( Buyshape, colorGreen, 1, BuyPrice, -1 );
//PlotShapes( Buyshape, colorYellow, 0, rLow+10, -10 );
//PlotText( "BUY@" + BuyPrice[0] + skrvars_print , 0, LastValue(rLow), colorGreen);
//PlotShapes( SellShape, colorBlue, 0, SellPrice, -1 );

Shortshape = Short * shapeSmallDownTriangle;
CoverShape = Cover * shapeStar;
PlotShapes( Shortshape, colorRed, 0, ShortPrice, -1);
//PlotShapes( Shortshape, coloryellow, 0, rHigh-10, -30);
//PlotText( "Short@" + ShortPrice[0] + skrvars_print , 0, LastValue(rHigh), colorRed);
PlotShapes( CoverShape, colorBrown, 0, CoverPrice, -1 )	;


}

if(1==0) // buy sell signal sent to amigo 
{

// from here the buy and sell signals . 
_SECTION_BEGIN("AmigoTrends");
// If user want to use external targets/stop loss from afl, please unhide the below code and
// asign corresponding array values to it.

 //LT1 = sars;		// Long Target1 External
// ST1 = Null;		// Short Target1 External

// LT2 = Null;		// Long Target2 External
// ST2 = Null;		// Short Targe2 External

// LT3 = Null;		// Long Target3 External
// ST3 = Null;		// Short Target3 External

// LSL = Null;		// Long Stoploss External
// SSL = Null;		// Short Stoploss External

//LT1 = 50;		// Long Target1 External
// ST1 = 50;

SSL=SSL2;
LSL=LSL2;

//LT1=C+10;
//ST1=C+10;


//LT1=ST1=LSL=SSL=0

 AmigoC1(Open, High, Low, Close, Volume, Buy, Sell, Short, Cover);
_SECTION_END();

}

if(1==0) // write buy sell price on chart 
{
dist=BrickSize;
dist1=1.2*dist;
dist2=0.6*dist;

for( i = 0; i < BarCount; i++ ) 
{ 
//skrvars_print="-O:"+rOpen[i-1]+"C:"+rClose[i-1];  // for using the last candle for buy sell signals 
skrvars_print="-O:"+Open[i]+"C:"+Close[i];  // for using the current signal for buy sell signals 
skrvars_print=".";
 if( Buy[i]) 
  PlotText( "BUY@" + BuyPrice[ i ] + skrvars_print , i, rLow[ i ]-5*dist[i], colorGreen);
  
 if( Short[i] )
   PlotText( "Short@" + ShortPrice[ i ] + skrvars_print , i, rHigh[ i ]+5*dist[i], colorRed);
 
 if( Cover[i] ) 
  PlotText( "Cover@" + CoverPrice[ i ] , i, rLow[ i ]-3.5*dist[i], colorRed );
 
 if( Sell[i] )
   PlotText( "Sell@" + SellPrice[ i ]  ,i, rHigh[ i ]+3.5*dist[i], colorGreen);

}

}

